plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "io.micronaut.application" version "4.5.0"
    id "org.barfuin.gradle.jacocolog" version "3.1.0"
    id "com.adarshr.test-logger" version "4.0.0"
}

version = "2.2.0"
group = "rest-ruler"

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation(platform("io.micronaut.platform:micronaut-platform:4.5.0"))
    annotationProcessor(platform("io.micronaut.platform:micronaut-platform:4.5.0"))
    annotationProcessor("info.picocli:picocli-codegen")
    implementation("info.picocli:picocli")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut:micronaut-inject-java")
    implementation("io.micronaut:micronaut-graal")
    implementation("io.swagger.parser.v3:swagger-parser-v3:2.1.12")
    implementation("io.swagger.parser.v3:swagger-parser:2.1.12")
    implementation("com.github.Steppschuh:Java-Markdown-Generator:1.3.2")
    implementation("org.fusesource.jansi:jansi:2.4.0")
    implementation("org.reflections:reflections:0.10.2")
    testImplementation("io.micronaut:micronaut-http-client")
    implementation("org.apache.directory.studio:org.apache.commons.io:2.4")
    implementation("org.atteo:evo-inflector:1.3")
    implementation("org.apache.opennlp:opennlp-tools:2.3.0")
    implementation("nz.ac.waikato.cms.weka:weka-stable:3.8.6")
    implementation("com.openai:openai-java:1.6.1")
}

shadowJar {
    archiveFileName = "rest-ruler.jar"
}

application {
    mainClass.set("cli.RestRulerCli")
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("cli.*")
    }
}

test {
    useJUnitPlatform()
	testLogging {
        // ensures tests are always run, even when they are uptodate
        dependsOn cleanTest
	}
}